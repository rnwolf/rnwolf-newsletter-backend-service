{
  "name": "rnwolf-newsletter-backend-service",
  "version": "1.0.0",
  "description": "API backend service for newsletter subscription management",
  "main": "src/index.ts",
  "directories": {
    "doc": "docs",
    "test": "tests"
  },
  "scripts": {
    "dev": "dotenv -e .env.local -- wrangler dev --config wrangler.jsonc --env local",
    "dev:staging": "dotenv -e .env.staging -- wrangler dev --config wrangler.jsonc --env staging",

    "secrets:staging": "dotenv -e .env.staging -- sh -c 'echo \"$HMAC_SECRET_KEY\" | npx wrangler secret put HMAC_SECRET_KEY --config wrangler.jsonc --env staging && echo \"$TURNSTILE_SECRET_KEY\" | npx wrangler secret put TURNSTILE_SECRET_KEY --env staging && echo \"$GRAFANA_API_KEY\" | npx wrangler secret put GRAFANA_API_KEY --env staging && echo \"$MAILCHANNEL_API_KEY\" | npx wrangler secret put MAILCHANNEL_API_KEY --env staging && echo \"$SENDER_EMAIL\" | npx wrangler secret put SENDER_EMAIL --env staging && echo \"$SENDER_NAME\" | npx wrangler secret put SENDER_NAME --env staging && echo \"$MAILCHANNEL_AUTH_ID\" | npx wrangler secret put MAILCHANNEL_AUTH_ID --env staging'",
    "secrets:production": "dotenv -e .env.production -- sh -c 'echo \"$HMAC_SECRET_KEY\" | npx wrangler secret put HMAC_SECRET_KEY --config wrangler.jsonc --env production && echo \"$TURNSTILE_SECRET_KEY\" | npx wrangler secret put TURNSTILE_SECRET_KEY --env production && echo \"$GRAFANA_API_KEY\" | npx wrangler secret put GRAFANA_API_KEY --env production && echo \"$MAILCHANNEL_API_KEY\" | npx wrangler secret put MAILCHANNEL_API_KEY --env production && echo \"$SENDER_EMAIL\" | npx wrangler secret put SENDER_EMAIL --env production && echo \"$SENDER_NAME\" | npx wrangler secret put SENDER_NAME --env production && echo \"$MAILCHANNEL_AUTH_ID\" | npx wrangler secret put MAILCHANNEL_AUTH_ID --env production'",

    "deploy:staging": "dotenv -e .env.staging -- wrangler deploy --config wrangler.jsonc --env staging",
    "deploy:production": "dotenv -e .env.production -- wrangler deploy --config wrangler.jsonc --env production",

    "test:local": "dotenv -e .env.local -- vitest run --config vitest.config.local.ts",
    "test:staging": "dotenv -e .env.staging -- vitest run --config vitest.config.staging.ts",
    "test:production": "dotenv -e .env.production -- vitest run --config vitest.config.production.ts",

    "test:smoke:staging": "dotenv -e .env.staging -- vitest run tests/smoke-*.test.ts --config vitest.config.staging.ts",
    "test:smoke:production": "dotenv -e .env.production -- vitest run tests/smoke-*.test.ts --config vitest.config.production.ts",
    "test:unit": "vitest run tests/api.test.ts tests/unsubscribe.test.ts tests/email-verification.test.ts --config vitest.config.local.ts",
    "test:integration": "vitest run tests/integration.test.ts tests/email-verification-integration.test.ts --config vitest.config.local.ts",
    "test:queue": "vitest run tests/queue-processing.test.ts --config vitest.config.local.ts",
    "test:metrics": "vitest run tests/metrics.test.ts --config vitest.config.local.ts",

    "test:metrics:local": "dotenv -e .env.local -- vitest run tests/metrics.test.ts --config vitest.config.local.ts",
    "test:metrics:staging": "dotenv -e .env.staging -- vitest run tests/metrics.test.ts --config vitest.config.staging.ts",
    "test:metrics:production": "dotenv -e .env.production -- vitest run tests/metrics.test.ts --config vitest.config.production.ts",

    "validate:metrics": "./scripts/metrics-validation.sh production",
    "validate:metrics:staging": "./scripts/metrics-validation.sh staging",

    "test:staging:workers": "dotenv -e .env.staging -- vitest run tests/api.test.ts tests/unsubscribe.test.ts tests/integration.test.ts tests/email-verification-integration.test.ts --config vitest.config.staging.ts",
    "test:production:workers": "dotenv -e .env.production -- vitest run tests/api.test.ts tests/unsubscribe.test.ts tests/integration.test.ts tests/email-verification-integration.test.ts --config vitest.config.production.ts",
    "test:health:staging": "curl -s https://api-staging.rnwolf.net/health | jq .",
    "test:health:production": "curl -s https://api.rnwolf.net/health | jq .",
    "test:all-envs": "npm run test:local && npm run test:staging",
    "test:performance": "dotenv -e .env.local -- vitest run tests/performance.test.ts --config vitest.config.local.ts",
    "test:performance:staging": "dotenv -e .env.staging -- vitest run tests/performance.test.ts --config vitest.config.staging.ts",
    "test:performance:production": "dotenv -e .env.production -- vitest run tests/performance.test.ts --config vitest.config.production.ts --reporter=verbose",
    "test:load": "npm run test:performance",

    "metrics:local": "curl -H 'Authorization: Bearer local-test-key' http://localhost:8787/metrics/json",
    "metrics:staging": "curl -H 'Authorization: Bearer $GRAFANA_API_KEY' https://api-staging.rnwolf.net/metrics/json",
    "metrics:production": "curl -H 'Authorization: Bearer $GRAFANA_API_KEY' https://api.rnwolf.net/metrics/json",

    "test:email-verification:full": "vitest run tests/email-verification.test.ts tests/email-verification-integration.test.ts tests/queue-processing.test.ts --config vitest.config.local.ts",
    "test:email-verification:unit": "vitest run tests/email-verification.test.ts --config vitest.config.local.ts",
    "test:email-verification:integration": "vitest run tests/email-verification-integration.test.ts --config vitest.config.local.ts",
    "test:email-verification:queue": "vitest run tests/queue-processing.test.ts --config vitest.config.local.ts",

    "db:reset:local": "dotenv -e .env.local -- wrangler d1 execute DB --env local --config wrangler.jsonc --file=./migrations/dev/drop_all_tables.sql",
    "db:seed:local": "dotenv -e .env.local -- wrangler d1 execute DB --env local --config wrangler.jsonc --file=./migrations/dev/database_seed.sql",
    "db:subscribers:local": "dotenv -e .env.local -- wrangler d1 execute DB --env local --config wrangler.jsonc --command \"SELECT * FROM subscribers ORDER BY updated_at ASC LIMIT 10;\"",

    "db:reset:staging": "dotenv -e .env.staging -- wrangler d1 execute DB --config wrangler.jsonc --env staging --remote --file=./migrations/dev/drop_all_tables.sql",
    "db:seed:staging": "dotenv -e .env.staging -- wrangler d1 execute DB --config wrangler.jsonc --env staging --remote --file=./migrations/dev/database_seed.sql",
    "db:subscribers:staging": "dotenv -e .env.staging -- wrangler d1 execute DB --config wrangler.jsonc --env staging --remote --command \"SELECT * FROM subscribers ORDER BY updated_at ASC LIMIT 10;\"",

    "db:reset:production": "dotenv -e .env.production -- wrangler d1 execute DB --config wrangler.jsonc --env production --remote --file=./migrations/dev/drop_all_tables.sql",
    "db:subscribers:production": "dotenv -e .env.production -- wrangler d1 execute DB --config wrangler.jsonc --env production --remote --command \"SELECT * FROM subscribers ORDER BY updated_at ASC LIMIT 10;\"",

    "db:migrate:local": "dotenv -e .env.local -- wrangler d1 migrations apply DB --config wrangler.jsonc --env local",
    "db:migrate:staging": "dotenv -e .env.staging -- wrangler d1 migrations apply DB --config wrangler.jsonc --env staging --remote",
    "db:migrate:production": "dotenv -e .env.production -- wrangler d1 migrations apply DB --config wrangler.jsonc --env production --remote",

    "db:status:local": "dotenv -e .env.local -- wrangler d1 migrations list DB --config wrangler.jsonc --env local",
    "db:status:staging": "dotenv -e .env.staging -- wrangler d1 migrations list DB --config wrangler.jsonc --env staging --remote",
    "db:status:production": "dotenv -e .env.production -- wrangler d1 migrations list DB --config wrangler.jsonc --env production --remote",

    "db:fresh:local": "npm run db:reset:local && npm run db:migrate:local",
    "db:fresh:staging": "npm run db:reset:staging && npm run db:migrate:staging",

    "db:backup:staging": "uv run ./scripts/db-backup-restore.py backup staging",
    "db:backup:production": "uv run ./scripts/db-backup-restore.py backup production",
    "db:restore:staging": "uv run ./scripts/db-backup-restore.py restore staging",
    "db:restore:production": "uv run ./scripts/db-backup-restore.py restore production",
    "db:list-backups": "uv run ./scripts/db-backup-restore.py list-backups",

    "type-check": "tsc --noEmit",
    "lint": "echo 'Add linting when ready'"
  },
  "keywords": [
    "cloudflare-workers",
    "newsletter",
    "api",
    "d1",
    "turnstile"
  ],
  "author": "Rudiger Wolf",
  "license": "MIT",
  "dependencies": {
    "@cloudflare/workers-types": "^4.20250531.0",
    "@opentelemetry/api": "^1.9.0"
  },
  "devDependencies": {
    "@cloudflare/vitest-pool-workers": "^0.8.34",
    "@opentelemetry/api": "^1.7.0",
    "@types/node": "^22.15.29",
    "dotenv-cli": "^8.0.0",
    "typescript": "^5.8.3",
    "vitest": "^3.1.4",
    "wrangler": "^4.22.0"
  }
}
